/** * Name: Eric Truong * Date: September 25, 2019 * Description: Finds the sum of digits, uses fibnoacci's sequence to a certain point, converts binary to decimal using * recursion *//**Three recursive problems. * Add your code to the three functions given below. * Do not change any part of the function headers (name, parameters, or return type). * Do not change any part of main. */public class Recursion {	public static void main( String[] args ) {		if( addDigits( 428 ) == 14 ) {			System.out.println( "addDigits1 is correct!" );		}		if( revFibonacci( 0, 1, 1, 5 ) == 5 ) {			System.out.println( "revFib1 is correct!" );		}			if( binToDec( "1101100" ) == 108 ) {			System.out.println( "binToDec1 is correct!" );		}		if( addDigits( 321 ) == 6 ) {			System.out.println( "addDigits2 is correct!" );		}		if( revFibonacci( 0, 1, 1, 10 ) == 55 ) {			System.out.println( "revFib2 is correct!" );		}			if( binToDec( "1011101" ) == 93 ) {			System.out.println( "binToDec2 is correct!" );		}	}	/**Finds the sum of the digits of num	 * @param num value to find the sum of	 * @return the sum of the digits	 */	public static int addDigits( int num ) {		if (num > 0){		 	//take the last number of the digit and add it		 	return (num % 10) + addDigits(num / 10);		 }		 return 0;	}	/**Finds the nth Fibonacci value	 * @param f1 n-2 Fibonacci value	 * @param f2 n-1 Fibonacci value	 * @param c  counter	 * @param n  the number c should count up to	 * @return  the nth Fibonacci value  	 */	public static int revFibonacci( int f1, int f2, int c, int n ) {		if (c < n){			c++;			//find the sum, then move every number to a new variable			int sum = f1 + f2;			f1 = f2;			f2 = sum;			return revFibonacci(f1, f2, c, n);		}		return f2;	}	/**Converts a binary string to decimal	 * @param bin the binary string	 * @return the decimal value 	 */	public static int binToDec( String bin ) {		if (bin.length() > -1){			//find where the first 1 occurs			if (bin.indexOf("1") == 0){				return (int) (Math.pow(2.0, bin.length() - 1)) + binToDec(bin.substring(1));			}			else if (bin.indexOf("1") == 1){				return (int) (Math.pow(2.0, bin.length() - 2)) + binToDec(bin.substring(2));			}			else{				return 0;			}		}		return 0;	}}